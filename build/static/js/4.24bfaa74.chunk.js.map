{"version":3,"sources":["../node_modules/lodash/orderBy.js","Pages/Historical_Arbitrage/EtfArbitrageTable.jsx","Pages/Historical_Arbitrage/DailyChangeUnderlying.jsx","Component/Table.js","Pages/Historical_Arbitrage/Historical_Arbitrage_Main.jsx","Routes/HistArbiageRoutes.jsx"],"names":["baseOrderBy","require","isArray","module","exports","collection","iteratees","orders","guard","undefined","EtfArbitrageTable","props","data","console","log","Table","size","striped","bordered","hover","variant","className","Array","map","index","cls","key","DailyChangeUnderlyingFunc","symbol","DailyChangepct","volume","stringConstructor","constructor","arrayConstructor","objectConstructor","whatIsIt","object","RenderRow","k","Object","keys","i","RenderRowClickable","onClick","submitFn","AppTable","getKeys","someJSON","MainKeys","style","fontSize","unshift","getHeader","Key1","row","values","clickableTable","HistoricalArbitrage","state","etfArbitrageTableData","historicalArbitrageData","scatterPlotData","etfmoversDictCount","etfPriceData","ArbitrageCumSum","highestChangeDictCount","isLoading","underlyingPerformance","parseDate","timeParse","fetchData","ETF","startDate","setState","Axios","get","then","etfhistoricaldata","PNLStatementForTheDay","tsvParse","etfPrices","parseData","SignalCategorization","catch","err","etfUnderlyingPerformance","res","parse","d","date","open","parseFloat","high","low","close","parseInt","this","match","params","prevProps","prevPropsETF","prevPropsStartDate","height","Card","bg","text","Header","CombinedPieCharts","Body","Loader","entries","value","DailyChangeUnderlying","LineChartForHistArb","React","Component","connect","navbar","HistArbiageRoutes","useSelector","ProtectedRoute","path","component","from","to"],"mappings":"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","file":"static/js/4.24bfaa74.chunk.js","sourcesContent":["var baseOrderBy = require('./_baseOrderBy'),\n    isArray = require('./isArray');\n\n/**\n * This method is like `_.sortBy` except that it allows specifying the sort\n * orders of the iteratees to sort by. If `orders` is unspecified, all values\n * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n * descending or \"asc\" for ascending sort order of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @param {string[]} [orders] The sort orders of `iteratees`.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 34 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 36 }\n * ];\n *\n * // Sort by `user` in ascending order and by `age` in descending order.\n * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n */\nfunction orderBy(collection, iteratees, orders, guard) {\n  if (collection == null) {\n    return [];\n  }\n  if (!isArray(iteratees)) {\n    iteratees = iteratees == null ? [] : [iteratees];\n  }\n  orders = guard ? undefined : orders;\n  if (!isArray(orders)) {\n    orders = orders == null ? [] : [orders];\n  }\n  return baseOrderBy(collection, iteratees, orders);\n}\n\nmodule.exports = orderBy;\n","import React from \"react\";\nimport { Table } from \"react-bootstrap\";\n\nconst EtfArbitrageTable = (props) => {\n  if (props.data == {} || props.data == undefined) {\n    return \"Loading\";\n  }\n\n  const { data } = props;\n\n  \nconsole.log(data)\n  return (\n    <Table\n      size=\"sm\"\n      striped\n      bordered\n      hover\n      variant=\"dark\"\n      className=\"font-size-sm\"\n    >\n      <thead>\n        <tr>\n          <th>Time</th>\n          <th>$Arbitrage</th>\n          <th>$Spread</th>\n          <th>$Absolute Arbitrage</th>\n          <th>Over Bought/Sold</th>\n          <th>ETF Price</th>\n          <th>T</th>\n          <th>Etf Mover</th>\n          <th>Most Change%</th>\n        </tr>\n      </thead>\n      <tbody>\n        {Array.isArray(data) &&\n          data.map((data, index) => {\n            let cls = \"\";\n            if (data[\"Over Bought/Sold\"] == \"Over Bought\") {\n              cls = \"red\";\n            } else if (data[\"Over Bought/Sold\"] == \"Over Sold\") {\n              cls = \"green\";\n            } else {\n              cls = \"\";\n            }\n            return (\n              <tr key={index}>\n                <td className={cls}>{data[\"Time\"] || \"\"}</td>\n                <td className={cls}>{data[\"Arbitrage in $\"] || 0}</td>\n                <td className={cls}>{data[\"$Spread\"] || \"\"}</td>\n                <td className={cls}>{data[\"Absolute Arbitrage\"] || 0}</td>\n                <td className={cls}>{data[\"Over Bought/Sold\"] || \"\"}</td>\n                <td>{data[\"ETF Price\"] || \"\"}</td>\n                <td>{data[\"T\"] || \"\"}</td>\n                <td>{data[\"ETFMover%1_ticker\"] || \"\"}</td>\n                <td>{data[\"Change%1_ticker\"] || \"\"}</td>\n              </tr>\n            );\n          })}\n      </tbody>\n    </Table>\n  );\n};\n\nexport default EtfArbitrageTable;\n","import React, { useState } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Table from \"react-bootstrap/Table\";\nimport { useEffect } from \"react\";\nimport { InputGroup, FormControl } from \"react-bootstrap\";\nimport { escapeRegExp } from \"lodash\";\nimport orderBy from \"lodash/orderBy\";\n\nimport \"./Styles/arbitrage.css\";\n\nconst DailyChangeUnderlyingFunc = ({ data }) => {\n  return (\n    <Table size=\"sm\" striped bordered hover variant=\"dark\" >\n      <thead>\n        <tr>\n          <th className=\"cursor-pointer\">Ticker</th>\n          <th>Daily Change %</th>\n          <th>Volume</th>\n        </tr>\n      </thead>\n      <tbody>\n        {Array.isArray(data) &&\n          data.map(({ symbol, DailyChangepct, volume }, index) => (\n            <tr key={`symbol${index}`}>\n              <td>{symbol && symbol}</td>\n              <td>{DailyChangepct && DailyChangepct}</td>\n              <td>{volume && volume}</td>\n            </tr>\n          ))}\n      </tbody>\n    </Table>\n  );\n};\n\nexport default DailyChangeUnderlyingFunc;\n","import React from 'react';\r\nimport Table from 'react-bootstrap/Table'\r\nimport '../static/css/TableStyle.css'\r\n\r\nvar stringConstructor = \"test\".constructor;\r\nvar arrayConstructor = [].constructor;\r\nvar objectConstructor = ({}).constructor;\r\n\r\nfunction whatIsIt(object) {\r\n  if (object === null) {\r\n    return \"null\";\r\n  }\r\n  if (object === undefined) {\r\n    return \"undefined\";\r\n  }\r\n  if (object.constructor === stringConstructor) {\r\n    return \"String\";\r\n  }\r\n  if (object.constructor === arrayConstructor) {\r\n    return \"Array\";\r\n  }\r\n  if (object.constructor === objectConstructor) {\r\n    return \"Object\";\r\n  }\r\n  return \"don't know\";\r\n}\r\n\r\nconst AppTable = (props) => {\r\n  // getting all te keys to the json data to diectly fetch the data later\r\n  const getKeys = function(someJSON){\r\n    return Object.keys(someJSON);\r\n  }\r\n\r\n  const MainKeys = getKeys(props.data);\r\n  \r\n  // getting the headings for the heading of the table\r\n  const getHeader = function(){\r\n    // console.log(whatIsIt(props.data[MainKeys[0]]));\r\n    var keys = (whatIsIt(props.data[MainKeys[0]]) === \"Object\") ? getKeys(props.data[MainKeys[0]]) : [];\r\n    keys.unshift(\"\");\r\n    // console.log(keys);\r\n    return keys.map((key, index)=>{\r\n      // console.log(key);\r\n      return <th key={key}>{key}</th>\r\n    })\r\n  }\r\n  \r\n  // getting data for each of the rows\r\n  const getRowsData = function(){\r\n    // var keys = (whatIsIt(props.data[MainKeys[0]]) != \"Object\") ? getKeys(props.data[MainKeys[0]]) : [];\r\n    return MainKeys.map((Key1, index) => {\r\n      var row = (typeof(props.data[Key1]) == Object) ? props.data[Key1].values() : props.data[Key1];\r\n      // console.log(row);\r\n    \r\n      if (props.clickableTable=='True'){\r\n        //console.log(\"Clickable was called\");\r\n        return <RenderRowClickable k={Key1} key={index} data={row} submitFn={props.submitFn}/>\r\n      } else{\r\n        //console.log(\"None-Clickable was called\");\r\n        return <RenderRow k={Key1} key={index} data={row} />\r\n      }\r\n    }) \r\n  }\r\n  \r\n  const TableStyling = {\r\n    fontSize: '11px'\r\n  };\r\n\r\n  return (\r\n    <div className=\"Table\">\r\n      <Table size=\"sm\" striped bordered hover variant=\"dark\" style={TableStyling}>\r\n      <thead className=\"TableHead\">\r\n        <tr>{getHeader()}</tr>\r\n      </thead>\r\n      <tbody>\r\n        {getRowsData()}\r\n      </tbody>\r\n      </Table>\r\n    </div>          \r\n  );\r\n}\r\n\r\n// functional Component to render one row at a time\r\nconst RenderRow = (props) =>{\r\n  if (whatIsIt(props.data) !== \"Object\"){\r\n    return( \r\n      <tr>\r\n        <td className=\"Main\">{props.k}</td>\r\n        <td>{props.data}</td>\r\n      </tr>\r\n    )\r\n  }\r\n  else {\r\n    return(\r\n      <tr>\r\n        <td className=\"Main\">{props.k}</td>\r\n        {\r\n          Object.keys(props.data).map((key, i) => (\r\n            <td key={i}>{props.data[key]}</td>\r\n          ))\r\n        }\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n// functional Component to render one row at a time\r\nconst RenderRowClickable = (props) =>{\r\n  if (whatIsIt(props.data) !== \"Object\"){\r\n    return( \r\n      <tr>\r\n        <td className=\"Main\">{props.k}</td>\r\n        <td>{props.data}</td>\r\n      </tr>\r\n    )\r\n  }\r\n  else {\r\n    return(\r\n      <tr onClick={() => props.submitFn(props.k)}>\r\n        <td className=\"Main\">{props.k}</td>\r\n        {\r\n          Object.keys(props.data).map((key, i) => (\r\n            <td key={i}>{props.data[key]}</td>\r\n          ))\r\n        }\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppTable","import React from \"react\";\nimport Axios from \"axios\";\n\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport Table from \"react-bootstrap/Table\";\nimport { tsvParse } from \"d3-dsv\";\nimport { timeParse } from \"d3-time-format\";\nimport \"./Styles/arbitrage.css\";\nimport EtfArbitrageTable from \"./EtfArbitrageTable\";\n\nimport DailyChangeUnderlyingFunc from \"./DailyChangeUnderlying\";\n\nimport LineChartForHistArb from \"../../Component/LineChartForHistArb\";\nimport ChartComponent from \"../../Component/StockPriceChart\";\nimport CombinedPieCharts from \"../../Component/CombinedPieCharts\";\nimport AppTable from \"../../Component/Table\";\n\nimport { connect } from \"react-redux\";\nimport { Loader } from \"../../Common_Components/Loader\";\nimport ScatterPlot from \"../../Component/ScatterPlott\";\nimport { CommonNavBar } from \"../../Common_Components/NavBar\";\nimport { CardGroup } from \"react-bootstrap\";\n\nclass HistoricalArbitrage extends React.Component {\n  state = {\n    etfArbitrageTableData: null,\n    historicalArbitrageData: \"\",\n    scatterPlotData: [],\n    etfmoversDictCount: null,\n    etfPriceData: \"\",\n    ArbitrageCumSum: [],\n    highestChangeDictCount: null,\n    isLoading: true,\n    underlyingPerformance: [],\n  };\n  parseDate = timeParse(\"%Y-%m-%d %H:%M:%S\");\n\n  parseData(parse) {\n    return function (d) {\n      d.date = parse(d.date);\n      d[\"Over Bought/Sold\"] = d[\"Over Bought/Sold\"];\n      d.open = +parseFloat(d.open);\n      d.high = +parseFloat(d.high);\n      d.low = +parseFloat(d.low);\n      d.close = +parseFloat(d.close);\n      d.volume = +parseInt(d.volume);\n\n      return d;\n    };\n  }\n\n  fetchData = (ETF, startDate) => {\n    if (ETF && startDate) {\n      this.setState({ ...this.state, isLoading: true });\n      Axios.get(`/api/PastArbitrageData/${ETF}/${startDate}`)\n        .then(({ data }) => {\n          \n          this.setState({\n            ...this.state,\n            etfArbitrageTableData: data.etfhistoricaldata,\n            PNLStatementForTheDay: data.PNLStatementForTheDay,\n            etfPriceData: tsvParse(data.etfPrices, this.parseData(this.parseDate)),\n            scatterPlotData: [...data.scatterPlotData],\n            etfmoversDictCount: data.etfmoversDictCount,\n            highestChangeDictCount: data.highestChangeDictCount,\n            SignalCategorization: <AppTable data={data.SignalCategorization} />,\n            ArbitrageCumSum: [...data.ArbitrageCumSum],\n            isLoading: false,\n          });\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  etfUnderlyingPerformance = (ETF, startDate) => {\n    if (ETF && startDate) {\n      this.setState({ ...this.state, isLoading: true });\n      Axios.get(`/api/PastArbitrageData/DailyChange/${ETF}/${startDate}`)\n        .then((res) => {\n          console.log(res);\n          this.setState({\n            ...this.state,\n            underlyingPerformance: [...res.data],\n            isLoading: false,\n          });\n        })\n        .catch((err) => console.log(err));\n    }\n  };\n\n  componentDidMount() {\n    const { ETF, startDate } = this.props.match.params;\n\n    this.fetchData(ETF, startDate);\n    this.etfUnderlyingPerformance(ETF, startDate);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      ETF: prevPropsETF,\n      startDate: prevPropsStartDate,\n    } = prevProps.match.params;\n    const { ETF, startDate } = this.props.match.params;\n\n    if (prevPropsETF !== ETF || prevPropsStartDate !== startDate) {\n      this.fetchData(ETF, startDate);\n      this.etfUnderlyingPerformance(ETF, startDate);\n    }\n  }\n\n  render() {\n    const { ETF, startDate } = this.props.match.params;\n    const {\n      isLoading,\n      etfArbitrageTableData,\n      ArbitrageCumSum,\n      etfmoversDictCount,\n      highestChangeDictCount,\n      PNLStatementForTheDay,\n      SignalCategorization,\n      underlyingPerformance,\n      etfPriceData,\n      scatterPlotData,\n    } = this.state;\n    return (\n    <>\n      <CommonNavBar />\n       <div className=\"container-fluid font-size-sm\">\n          <div className=\"row\">\n          \n            <div className=\"col-lg-6 col-md-6 col-sm-12\">\n                <div className=\"row\">\n                  \n                  <div className=\"col-lg-8 col-md-8 col-sm-12 padding-0\">\n                    <div className=\"etfArbitrageTable\"  style={{ height: \"92vh\" }}>\n                      <Card bg=\"dark\" text=\"light\">\n                        <Card.Header className=\"flex-row\">\n                          <span>\n                            Histortical Data {ETF} {startDate}\n                          </span>\n\n                          <div className=\"margin-left-auto\">\n                            <CombinedPieCharts\n                              etfmoversDictCount={etfmoversDictCount}\n                              highestChangeDictCount={highestChangeDictCount}\n                            />\n                          </div>\n                        </Card.Header>\n                        <Card.Body className=\"padding-1px overflow-auto\">\n                          {isLoading ? (\n                            <Loader />\n                          ) : (\n                            <EtfArbitrageTable data={etfArbitrageTableData} />\n                          )}\n                        </Card.Body>\n                      </Card>\n                    </div>\n                  </div>\n\n                  <div className=\"col-lg-4 col-md-4 col-sm-12\">\n                    <div className=\"row\">\n\n                      <div className=\"col-lg-12 col-md-12 col-sm-12\">\n                         <Card className=\"height-100\" bg=\"dark\" text=\"light\">\n                            <Card.Header>Signal Performance</Card.Header>\n                            <Card.Body className=\"padding-1px\">\n                              {isLoading ? (\n                                <Loader />\n                              ) : (\n                                <Table size=\"sm\" striped bordered hover variant=\"dark\">\n                                  <tbody>\n                                    {typeof PNLStatementForTheDay === \"object\" &&\n                                      Object.entries(PNLStatementForTheDay).map(\n                                        ([key, value]) => (\n                                          <tr key={key}>\n                                            <td>{key}</td>\n                                            <td>{value}</td>\n                                          </tr>\n                                        )\n                                      )}\n                                  </tbody>\n                                </Table>\n                              )}\n                            </Card.Body>\n                          </Card>\n                      </div>\n\n                       <div className=\"col-lg-12 col-md-12 col-sm-12\">\n                          <Card bg=\"dark\" text=\"light\" className=\"height-100\">\n                            <Card.Header>Arbitrage Spread</Card.Header>\n                            <Card.Body className=\"padding-1px\">\n                              {isLoading ? <Loader /> : SignalCategorization}\n                            </Card.Body>\n                          </Card>\n                        </div>\n\n                      <div className=\"col-lg-12 col-md-12 col-sm-12\">\n                          <Card bg=\"dark\" text=\"light\">\n                            <Card.Header>Underlyings Daily Change</Card.Header>\n                            <Card.Body style={{height:\"40vh\"}} className=\"overflow-auto padding-sm padding-1px\">\n                              {this.state.isLoading ? (\n                                <Loader />\n                              ) : (\n                                <DailyChangeUnderlyingFunc data={underlyingPerformance} />\n                              )}\n                            </Card.Body>\n                        </Card>\n                      </div>\n\n                    </div>\n                  </div>\n\n                </div>\n            </div>\n\n\n            <div className=\"col-lg-6 col-md-6 col-sm-12 padding-0\">\n              <div className=\"row\">\n                \n               <div className=\"col-lg-12 col-md-12 col-sm-12\">\n                  <Card bg=\"dark\" text=\"light\" className=\"height-100\">\n                    <Card.Header>Price Chart</Card.Header>\n                    <Card.Body className=\"padding-1px\">\n                      <ChartComponent data={etfPriceData} />\n                    </Card.Body>\n                  </Card>\n               </div>\n\n                <div className=\"col-lg-6 col-md-6 col-sm-12\">\n                  <Card bg=\"dark\" text=\"light\" className=\"height-100\">\n                    <Card.Header>Arb Time Series</Card.Header>\n                    <Card.Body className=\"padding-1px\">\n                      {isLoading ? (\n                        <Loader />\n                      ) : (\n                        <LineChartForHistArb data={ArbitrageCumSum} />\n                      )}\n                    </Card.Body>\n                  </Card>\n                </div>\n\n                <div className=\"col-lg-6 col-md-6 col-sm-12 padding-0\">\n                  <Card bg=\"dark\" text=\"light\" className=\"height-100\">\n                    <Card.Header>ETF Change % Vs NAV change %</Card.Header>\n                    <Card.Body className=\"padding-1px\">\n                      <ScatterPlot data={scatterPlotData}  />\n                    </Card.Body>\n                  </Card>\n                </div>\n\n              </div>\n            </div>\n\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ETF: state.navbar.ETF,\n    startDate: state.navbar.startDate,\n  };\n};\n\nexport default connect(mapStateToProps, null)(HistoricalArbitrage);\n","import React from \"react\";\nimport { Switch, Redirect } from \"react-router-dom\";\nimport ProtectedRoute from \"./ProtectedRoute\";\nimport { HistoricalArbitrage } from \"../Pages/Historical_Arbitrage\";\nimport { useSelector } from \"react-redux\";\n\nconst HistArbiageRoutes = () => {\n  const { ETF, startDate } = useSelector((state) => state.navbar);\n  return (\n    <Switch>\n      <ProtectedRoute\n        path=\"/historical-arbitrage/:ETF/:startDate\"\n        component={HistoricalArbitrage}\n      />\n         <Redirect\n      \n      from=\"/historical-arbitrage/:ETF\"\n      to={`/historical-arbitrage/:ETF/${startDate}`}\n    />\n      <Redirect\n        from=\"/historical-arbitrage\"\n        to={`/historical-arbitrage/${ETF}/${startDate}`}\n      />\n    </Switch>\n  );\n};\n\nexport default HistArbiageRoutes;\n"],"sourceRoot":""}