{"version":3,"sources":["Pages/Live_Arbitrage/Live_Arb_Table.jsx","Pages/Live_Arbitrage/Live_Arbitrage_All.jsx","Routes/Live_Arbitrage_All.jsx"],"names":["LiveArbitrageAllTable","props","useState","tableData","setTableData","Date","fetchTime","setfFetchTime","currentTime","setCurrentTime","dataForTime","setDataForTime","errorCode","setErrorCode","getAPIdata","Axios","get","then","data","catch","err","response","status","useEffect","length","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","getSeconds","selectOptions","Balanced","priceFormatter","cell","row","style","color","columns","dataField","text","sort","filter","textFilter","width","height","marginLeft","sortCaret","order","column","className","numberFilter","comparatorStyle","padding","numberStyle","margin","formatter","selectFilter","options","expandRow","parentClassName","renderer","Table","striped","hover","variant","bsPrefix","key","symbol","toFixed","showExpandColumn","onExpand","isExpand","rowIndex","e","onExpandAll","isExpandAll","rows","expandHeaderColumnRenderer","isAnyExpands","expandColumnRenderer","expanded","alignContent","toLocaleTimeString","year","month","day","hour","minute","toLocaleString","keyField","bootstrap4","size","classes","filterFactory","Live_Arbitrage_All","state","LiveArbitrageAllEtf","Row","Col","xs","md","lg","this","React","Component","connect","ETF","navbar","LiveArbitrageAllRoutes","ProtectedRoute","path","component"],"mappings":"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","file":"static/js/7.70f4899f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useRef, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport filterFactory, {\n  textFilter,\n  selectFilter,\n  numberFilter,\n} from \"react-bootstrap-table2-filter\";\nimport { Table } from \"react-bootstrap\";\n\nconst LiveArbitrageAllTable = (props) => {\n  const [tableData, setTableData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  // const [isLoading, setIsLoading] = useState(true);\n  const [fetchTime, setfFetchTime] = useState(new Date());\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [dataForTime, setDataForTime] = useState(new Date());\n  // const [refreshElement, setRefreshElement] = useState([]);\n  const [errorCode, setErrorCode] = useState(null);\n  // let refreshElement = null;\n\n  function getAPIdata() {\n    Axios.get(`/api/ETfLiveArbitrage/AllTickers`)\n      .then(({ data }) => {\n        setTableData(data);\n        setDataForTime(data[0][\"Timestamp\"]);\n        // setFilteredData(data);\n      })\n      .catch((err) => {\n        setErrorCode(err.response.status);\n      });\n  }\n  /* Custom Hook for interval call of API */\n  function useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n      function tick() {\n        savedCallback.current();\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    }, [delay]);\n  }\n\n  // function getTS() {\n  //     if (tableData.length>0) {\n  //         setDataForTime(tableData[0]['Timestamp'])\n  //         console.log(tableData[0]['Timestamp'])\n  //     }\n  //     console.log(\"Timestamp func\");\n  // }\n\n  useEffect(() => {\n    if (tableData.length < 1) {\n      getAPIdata();\n    }\n  }, []);\n\n  useInterval(() => {\n    // Your custom logic here\n    if (new Date().getSeconds() === 8) {\n      getAPIdata();\n      setfFetchTime(new Date());\n    }\n    setCurrentTime(new Date());\n  }, 1000);\n\n  const selectOptions = {\n    \"Over Bought\": \"Over Bought\",\n    Balanced: \"Balanced\",\n    \"Over Sold\": \"Over Sold\",\n  };\n\n  function priceFormatter(cell, row) {\n    if (row[\"Over Bought/Sold\"] == \"Over Sold\") {\n      return (\n        <span>\n          <strong style={{ color: \"green\" }}>{cell}</strong>\n        </span>\n      );\n    } else if (row[\"Over Bought/Sold\"] == \"Over Bought\") {\n      return (\n        <span>\n          <strong style={{ color: \"red\" }}>{cell}</strong>\n        </span>\n      );\n    } else {\n      return <>{cell}</>;\n    }\n  }\n\n  const columns = [\n    {\n      dataField: \"symbol\",\n      text: \"Ticker\",\n      sort: true,\n      filter: textFilter({\n        style: {width: \"100px\",height:\"25px\", marginLeft: \"10px\" },\n      }),\n      sortCaret: (order, column) => {\n        if (!order)\n          return (\n            <span>\n              &nbsp;&nbsp;<i className=\"fas fa-sort\"></i>\n            </span>\n          );\n        else if (order === \"asc\")\n          return (\n            <span>\n              &nbsp;&nbsp;\n              <font color=\"red\">\n                <i className=\"fas fa-sort-down\"></i>\n              </font>\n            </span>\n          );\n        else if (order === \"desc\")\n          return (\n            <span>\n              &nbsp;&nbsp;\n              <font color=\"red\">\n                <i className=\"fas fa-sort-up\"></i>\n              </font>\n            </span>\n          );\n        return null;\n      },\n    },\n    {\n      dataField: \"Arbitrage in $\",\n      text: \"Arbitrage in $\",\n      sort: true,\n      filter: numberFilter({\n        comparatorStyle: { padding: \"5px\",height:\"25px\" },\n        numberStyle: { width: \"100px\",height:\"25px\", margin: \"10px\" },\n      }),\n      formatter: priceFormatter,\n      sortCaret: (order, column) => {\n        if (!order)\n          return (\n            <span>\n              &nbsp;&nbsp;<i className=\"fas fa-sort\"></i>\n            </span>\n          );\n        else if (order === \"asc\")\n          return (\n            <span>\n              &nbsp;&nbsp;\n              <font color=\"red\">\n                <i className=\"fas fa-sort-down\"></i>\n              </font>\n            </span>\n          );\n        else if (order === \"desc\")\n          return (\n            <span>\n              &nbsp;&nbsp;\n              <font color=\"red\">\n                <i className=\"fas fa-sort-up\"></i>\n              </font>\n            </span>\n          );\n        return null;\n      },\n    },\n    {\n      dataField: \"ETF Trading Spread in $\",\n      text: \"ETF Trading Spread in $\",\n      sort: true,\n      filter: numberFilter({\n        comparatorStyle: { padding: \"5px\",height:\"25px\" },\n        numberStyle: { width: \"100px\",height:\"25px\", margin: \"10px\" },\n      }),\n      formatter: priceFormatter,\n      sortCaret: (order, column) => {\n        if (!order)\n          return (\n            <span>\n              &nbsp;&nbsp;<i className=\"fas fa-sort\"></i>\n            </span>\n          );\n        else if (order === \"asc\")\n          return (\n            <span>\n              &nbsp;&nbsp;\n              <font color=\"red\">\n                <i className=\"fas fa-sort-down\"></i>\n              </font>\n            </span>\n          );\n        else if (order === \"desc\")\n          return (\n            <span>\n              &nbsp;&nbsp;\n              <font color=\"red\">\n                <i className=\"fas fa-sort-up\"></i>\n              </font>\n            </span>\n          );\n        return null;\n      },\n    },\n    {\n      dataField: \"Absolute Arbitrage\",\n      text: \"Absolute Arbitrage\",\n      sort: true,\n      filter: numberFilter({\n        comparatorStyle: { padding: \"5px\",height:\"25px\"},\n        numberStyle: { width: \"100px\", height:\"25px\",margin: \"10px\" },\n      }),\n      formatter: priceFormatter,\n      sortCaret: (order, column) => {\n        if (!order)\n          return (\n            <span>\n              &nbsp;&nbsp;<i className=\"fas fa-sort\"></i>\n            </span>\n          );\n        else if (order === \"asc\")\n          return (\n            <span>\n              &nbsp;&nbsp;\n              <font color=\"red\">\n                <i className=\"fas fa-sort-down\"></i>\n              </font>\n            </span>\n          );\n        else if (order === \"desc\")\n          return (\n            <span>\n              &nbsp;&nbsp;\n              <font color=\"red\">\n                <i className=\"fas fa-sort-up\"></i>\n              </font>\n            </span>\n          );\n        return null;\n      },\n    },\n    {\n      dataField: \"ETF Price\",\n      text: \"ETF Price\",\n      sort: true,\n      formatter: priceFormatter,\n      sortCaret: (order, column) => {\n        if (!order)\n          return (\n            <span>\n              &nbsp;&nbsp;<i className=\"fas fa-sort\"></i>\n            </span>\n          );\n        else if (order === \"asc\")\n          return (\n            <span>\n              &nbsp;&nbsp;\n              <font color=\"red\">\n                <i className=\"fas fa-sort-down\"></i>\n              </font>\n            </span>\n          );\n        else if (order === \"desc\")\n          return (\n            <span>\n              &nbsp;&nbsp;\n              <font color=\"red\">\n                <i className=\"fas fa-sort-up\"></i>\n              </font>\n            </span>\n          );\n        return null;\n      },\n    },\n    {\n      dataField: \"ETF Change Price %\",\n      text: \"ETF Change Price %\",\n      sort: true,\n      formatter: priceFormatter,\n      sortCaret: (order, column) => {\n        if (!order)\n          return (\n            <span>\n              &nbsp;&nbsp;<i className=\"fas fa-sort\"></i>\n            </span>\n          );\n        else if (order === \"asc\")\n          return (\n            <span>\n              &nbsp;&nbsp;\n              <font color=\"red\">\n                <i className=\"fas fa-sort-down\"></i>\n              </font>\n            </span>\n          );\n        else if (order === \"desc\")\n          return (\n            <span>\n              &nbsp;&nbsp;\n              <font color=\"red\">\n                <i className=\"fas fa-sort-up\"></i>\n              </font>\n            </span>\n          );\n        return null;\n      },\n    },\n    {\n      dataField: \"Net Asset Value Change%\",\n      text: \"Net Asset Value Change%\",\n      sort: true,\n      formatter: priceFormatter,\n      sortCaret: (order, column) => {\n        if (!order)\n          return (\n            <span>\n              &nbsp;&nbsp;<i className=\"fas fa-sort\"></i>\n            </span>\n          );\n        else if (order === \"asc\")\n          return (\n            <span>\n              &nbsp;&nbsp;\n              <font color=\"red\">\n                <i className=\"fas fa-sort-down\"></i>\n              </font>\n            </span>\n          );\n        else if (order === \"desc\")\n          return (\n            <span>\n              &nbsp;&nbsp;\n              <font color=\"red\">\n                <i className=\"fas fa-sort-up\"></i>\n              </font>\n            </span>\n          );\n        return null;\n      },\n    },\n    {\n      dataField: \"Over Bought/Sold\",\n      text: \"Over Bought/Sold\",\n      sort: true,\n      formatter: (cell) => selectOptions[cell],\n      filter: selectFilter({\n        options: selectOptions,\n        style: { width: \"100px\", height:\"25px\",margin: \"10px\" },\n      }),\n      formatter: priceFormatter,\n      sortCaret: (order, column) => {\n        if (!order)\n          return (\n            <span>\n              &nbsp;&nbsp;<i className=\"fas fa-sort\"></i>\n            </span>\n          );\n        else if (order === \"asc\")\n          return (\n            <span>\n              &nbsp;&nbsp;\n              <font color=\"red\">\n                <i className=\"fas fa-sort-down\"></i>\n              </font>\n            </span>\n          );\n        else if (order === \"desc\")\n          return (\n            <span>\n              &nbsp;&nbsp;\n              <font color=\"red\">\n                <i className=\"fas fa-sort-up\"></i>\n              </font>\n            </span>\n          );\n        return null;\n      },\n    },\n  ];\n\n  const expandRow = {\n    parentClassName: \"table-primary\",\n    renderer: (data) => (\n      <div>\n        <Table striped hover variant=\"dark\" bsPrefix=\"innerTable\">\n          <thead>\n            <tr>\n              <th className=\"cursor-pointer\">Top</th>\n              <th>ETF Mover</th>\n              <th>Moved By</th>\n              <th>Change in Holding</th>\n              <th>Changed by</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr key={\"row-expanded-1-\" + data.symbol}>\n              <td> #1 </td>\n              <td>{data[\"ETFMover%1\"][0]}</td>\n              <td\n                className={\n                  data[\"ETFMover%1\"][1].toFixed(3) < 0 ? \"red\" : \"green\"\n                }\n              >\n                {data[\"ETFMover%1\"][1].toFixed(3)}\n              </td>\n              <td>{data[\"Change%1\"][0]}</td>\n              <td\n                className={\n                  data[\"ETFMover%1\"][1].toFixed(3) < 0 ? \"red\" : \"green\"\n                }\n              >\n                {data[\"Change%1\"][1].toFixed(3)}\n              </td>\n            </tr>\n            <tr key={\"row-expanded-2-\" + data.symbol}>\n              <td> #2 </td>\n              <td>{data[\"ETFMover%2\"][0]}</td>\n              <td\n                className={\n                  data[\"ETFMover%2\"][1].toFixed(3) < 0 ? \"red\" : \"green\"\n                }\n              >\n                {data[\"ETFMover%2\"][1].toFixed(3)}\n              </td>\n              <td>{data[\"Change%2\"][0]}</td>\n              <td\n                className={data[\"Change%2\"][1].toFixed(3) < 0 ? \"red\" : \"green\"}\n              >\n                {data[\"Change%2\"][1].toFixed(3)}\n              </td>\n            </tr>\n            <tr key={\"row-expanded-3-\" + data.symbol}>\n              <td> #3 </td>\n              <td>{data[\"ETFMover%3\"][0]}</td>\n              <td\n                className={\n                  data[\"ETFMover%3\"][1].toFixed(3) < 0 ? \"red\" : \"green\"\n                }\n              >\n                {data[\"ETFMover%3\"][1].toFixed(3)}\n              </td>\n              <td>{data[\"Change%3\"][0]}</td>\n              <td\n                className={data[\"Change%3\"][1].toFixed(3) < 0 ? \"red\" : \"green\"}\n              >\n                {data[\"Change%3\"][1].toFixed(3)}\n              </td>\n            </tr>\n            <tr key={\"row-expanded-4-\" + data.symbol}>\n              <td> #4 </td>\n              <td>{data[\"ETFMover%4\"][0]}</td>\n              <td\n                className={\n                  data[\"ETFMover%4\"][1].toFixed(3) < 0 ? \"red\" : \"green\"\n                }\n              >\n                {data[\"ETFMover%4\"][1].toFixed(3)}\n              </td>\n              <td>{data[\"Change%4\"][0]}</td>\n              <td\n                className={data[\"Change%4\"][1].toFixed(3) < 0 ? \"red\" : \"green\"}\n              >\n                {data[\"Change%4\"][1].toFixed(3)}\n              </td>\n            </tr>\n            <tr key={\"row-expanded-5-\" + data.symbol}>\n              <td> #5 </td>\n              <td>{data[\"ETFMover%5\"][0]}</td>\n              <td\n                className={\n                  data[\"ETFMover%5\"][1].toFixed(3) < 0 ? \"red\" : \"green\"\n                }\n              >\n                {data[\"ETFMover%5\"][1].toFixed(3)}\n              </td>\n              <td>{data[\"Change%5\"][0]}</td>\n              <td\n                className={data[\"Change%5\"][1].toFixed(3) < 0 ? \"red\" : \"green\"}\n              >\n                {data[\"Change%5\"][1].toFixed(3)}\n              </td>\n            </tr>\n          </tbody>\n        </Table>\n      </div>\n    ),\n    showExpandColumn: true,\n    onExpand: (row, isExpand, rowIndex, e) => {},\n    onExpandAll: (isExpandAll, rows, e) => {},\n    expandHeaderColumnRenderer: ({ isAnyExpands }) => {\n      if (isAnyExpands) {\n        return <i className=\"fas fa-caret-down\" style={{ width: \"10px\" }}></i>;\n      }\n      return <i className=\"fas fa-caret-right\" style={{ width: \"10px\" }}></i>;\n    },\n    expandColumnRenderer: ({ expanded }) => {\n      if (expanded) {\n        return <i className=\"fas fa-caret-down\" style={{ width: \"10px\" }}></i>;\n      }\n      return <i className=\"fas fa-caret-right\" style={{ width: \"10px\" }}></i>;\n    },\n  };\n\n  if (errorCode >= 500) {\n    return (\n      <h3 style={{ color: \"red\", alignContent: \"center\" }}>\n        DATA FOR THIS MINUTE WILL BE AVAILABLE AT 8TH SECOND OF THIS MINUTE\n      </h3>\n    );\n  }\n\n  return (\n    <div style={{ padding: \"20px\" }}>\n      <form>\n        <div className=\"form-row\">\n          <div className=\"col-md-4 mb-3\">\n            <span className=\"App-clock text-white\">\n              Showing Data for :{\" \"}\n            </span>\n            <span style={{ color: \"red\" }}>\n              {new Date(dataForTime).toLocaleTimeString([], {\n                year: \"numeric\",\n                month: \"numeric\",\n                day: \"numeric\",\n                hour: \"2-digit\",\n                minute: \"2-digit\",\n              })}\n            </span>\n            <span className=\"text-white\"> Local Time</span>\n          </div>\n          <div className=\"col-md-4 mb-3\">\n            <span className=\"App-clock text-white\">Data Fetched at: </span>\n            <span style={{ color: \"red\" }}>\n              {fetchTime.toLocaleString()}\n            </span>\n            <span className=\"text-white\"> Local Time</span>\n          </div>\n          <div className=\"col-md-4 mb-3\">\n            <span className=\"App-clock text-white\">\n              Current Local time:{\" \"}\n            </span>\n            <span style={{ color: \"red\" }}>\n              {currentTime.toLocaleString()}\n            </span>\n            <span className=\"text-white\"> Local Time</span>\n          </div>\n        </div>\n      </form>\n      <BootstrapTable\n        keyField=\"symbol\"\n        data={tableData}\n        bootstrap4={true}\n        columns={columns}\n        striped\n        hover\n        size=\"lg\"\n        classes=\"table-dark font-size-sm\"\n        expandRow={expandRow}\n        filter={filterFactory()}\n      />\n    </div>\n  );\n};\n\nexport default LiveArbitrageAllTable;\n","import React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport \"./Styles/Live_Arbitrage_All.css\";\nimport LiveArbitrageAllTable from \"./Live_Arb_Table\";\nimport { connect } from \"react-redux\";\nimport { CommonNavBar } from \"../../Common_Components/NavBar\";\n\nclass Live_Arbitrage_All extends React.Component {\n  state = {\n    LiveArbitrageAllEtf: \"\",\n  };\n\n  render() {\n    return (\n      <>\n        <CommonNavBar />\n        <Row>\n          <Col xs={12} md={12} lg={12}>\n            <LiveArbitrageAllTable\n              data={this.state.LiveArbitrageAllEtf || []}\n            />\n          </Col>\n        </Row>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ETF: state.navbar.ETF,\n  };\n};\n\nexport default connect(mapStateToProps, null)(Live_Arbitrage_All);\n","import React from \"react\";\nimport { Switch } from \"react-router-dom\";\nimport ProtectedRoute from \"./ProtectedRoute\";\nimport { Live_Arbitrage_All } from \"../Pages/Live_Arbitrage\";\n\nconst LiveArbitrageAllRoutes = () => {\n  return (\n    <Switch>\n      <ProtectedRoute\n        path=\"/Live-Arbitrage\"\n        component={Live_Arbitrage_All}\n      />\n    </Switch>\n  );\n};\n\nexport default LiveArbitrageAllRoutes;\n"],"sourceRoot":""}