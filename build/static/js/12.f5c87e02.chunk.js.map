{"version":3,"sources":["Pages/Live_Arbitrage/Live_Arb_Table2.jsx","Pages/Live_Arbitrage/Live_Arbitrage_All.jsx","Routes/Live_Arbitrage_All.jsx"],"names":["LiveArbitrageAllTable","props","useState","tableData","setTableData","Date","fetchTime","setfFetchTime","currentTime","setCurrentTime","dataForTime","setDataForTime","errorCode","setErrorCode","getAPIdata","Axios","get","then","data","catch","err","console","log","response","status","useEffect","length","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","getSeconds","selectOptions","priceFormatter","cell","row","style","color","columns","dataField","text","sort","filter","textFilter","width","marginLeft","sortCaret","order","column","className","numberFilter","comparatorStyle","padding","numberStyle","margin","formatter","selectFilter","options","expandRow","parentClassName","renderer","Table","striped","hover","variant","bsPrefix","key","symbol","toFixed","showExpandColumn","onExpand","isExpand","rowIndex","e","onExpandAll","isExpandAll","rows","expandHeaderColumnRenderer","isAnyExpands","expandColumnRenderer","expanded","alignContent","toLocaleTimeString","year","month","day","hour","minute","toLocaleString","keyField","bootstrap4","size","classes","filterFactory","Live_Arbitrage_All","state","LiveArbitrageAllEtf","Row","Col","xs","md","lg","this","React","Component","connect","ETF","navbar","LiveArbitrageAllRoutes","ProtectedRoute","path","component"],"mappings":"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","file":"static/js/12.f5c87e02.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useRef, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport filterFactory, { textFilter, selectFilter, numberFilter } from 'react-bootstrap-table2-filter';\nimport { Card, Table } from \"react-bootstrap\";\nimport orderBy from \"lodash/orderBy\";\nimport escapeRegExp from \"lodash/escapeRegExp\";\nimport filter from \"lodash/filter\";\nimport debounce from \"lodash/debounce\";\n// import { Loader } from \"../../Common_Components/Loader\";\n\nconst LiveArbitrageAllTable = (props) => {\n\n    const [tableData, setTableData] = useState([]);\n    const [filteredData, setFilteredData] = useState([]);\n    // const [isLoading, setIsLoading] = useState(true);\n    const [fetchTime, setfFetchTime] = useState(new Date());\n    const [currentTime, setCurrentTime] = useState(new Date());\n    const [dataForTime, setDataForTime] = useState(new Date());\n    // const [refreshElement, setRefreshElement] = useState([]);\n    const [errorCode, setErrorCode] = useState(null);\n    // let refreshElement = null;\n    \n\n\n    function getAPIdata() {\n        Axios.get(\n            `/api/ETfLiveArbitrage/AllTickers`\n        ).then(({ data }) => {\n            setTableData(data);\n            setDataForTime(data[0]['Timestamp']);\n            // setFilteredData(data);\n        })\n            .catch((err) => {\n                console.log(err.response.status);\n                setErrorCode(err.response.status);\n                console.log(err);\n            });\n    }\n    /* Custom Hook for interval call of API */\n    function useInterval(callback, delay) {\n        const savedCallback = useRef();\n\n        // Remember the latest callback.\n        useEffect(() => {\n            savedCallback.current = callback;\n        }, [callback]);\n\n        // Set up the interval.\n        useEffect(() => {\n            function tick() {\n                savedCallback.current();\n            }\n            if (delay !== null) {\n                let id = setInterval(tick, delay);\n                return () => clearInterval(id);\n            }\n        }, [delay]);\n    }\n\n    // function getTS() {\n    //     if (tableData.length>0) {\n    //         setDataForTime(tableData[0]['Timestamp'])\n    //         console.log(tableData[0]['Timestamp'])\n    //     }\n    //     console.log(\"Timestamp func\");\n    // }\n\n    useEffect(() => {\n        if (tableData.length < 1) {\n            getAPIdata()\n        }\n    }, []);\n\n    useInterval(() => {\n        // Your custom logic here\n        if (new Date().getSeconds() === 8) {\n            getAPIdata();\n            setfFetchTime(new Date());\n        }\n        setCurrentTime(new Date());\n    }, 1000);\n\n    const selectOptions = {\n        'Over Bought': 'Over Bought',\n        'Balanced': 'Balanced',\n        'Over Sold': 'Over Sold'\n    };\n\n    function priceFormatter(cell, row) {\n        if (row['Over Bought/Sold']=='Over Sold') {\n            return (\n                <span>\n                  <strong style={ { color: 'green' } }>{ cell }</strong>\n                </span>\n              );\n        }\n        else if (row['Over Bought/Sold']=='Over Bought'){\n            return (\n              <span>\n                <strong style={ { color: 'red' } }>{ cell }</strong>\n              </span>\n            );\n          }\n        else{\n            return (<>{cell}</>)\n        }\n      }\n\n\n    const columns = [{\n        dataField: 'symbol',\n        text: 'Ticker',\n        sort: true,\n        filter: textFilter({\n            style: {width: '100px', marginLeft:'10px'}\n        }),\n        sortCaret: (order, column) => {\n            if (!order) return (<span>&nbsp;&nbsp;<i className=\"fas fa-sort\"></i></span>);\n            else if (order === 'asc') return (<span>&nbsp;&nbsp;<font color=\"red\"><i className=\"fas fa-sort-down\"></i></font></span>);\n            else if (order === 'desc') return (<span>&nbsp;&nbsp;<font color=\"red\"><i className=\"fas fa-sort-up\"></i></font></span>);\n            return null;\n          }\n    }, {\n        dataField: 'Arbitrage in $',\n        text: 'Arbitrage in $',\n        sort: true,\n        filter: numberFilter({\n                comparatorStyle: {padding:'5px'},\n                numberStyle: { width: '100px', margin:'10px' },\n              }),\n        formatter: priceFormatter,\n        sortCaret: (order, column) => {\n            if (!order) return (<span>&nbsp;&nbsp;<i className=\"fas fa-sort\"></i></span>);\n            else if (order === 'asc') return (<span>&nbsp;&nbsp;<font color=\"red\"><i className=\"fas fa-sort-down\"></i></font></span>);\n            else if (order === 'desc') return (<span>&nbsp;&nbsp;<font color=\"red\"><i className=\"fas fa-sort-up\"></i></font></span>);\n            return null;\n          }\n    }, {\n        dataField: 'ETF Trading Spread in $',\n        text: 'ETF Trading Spread in $',\n        sort: true,\n        filter: numberFilter({\n            comparatorStyle: {padding:'5px'},\n            numberStyle: { width: '100px', margin:'10px'},\n          }),\n        formatter: priceFormatter,\n        sortCaret: (order, column) => {\n            if (!order) return (<span>&nbsp;&nbsp;<i className=\"fas fa-sort\"></i></span>);\n            else if (order === 'asc') return (<span>&nbsp;&nbsp;<font color=\"red\"><i className=\"fas fa-sort-down\"></i></font></span>);\n            else if (order === 'desc') return (<span>&nbsp;&nbsp;<font color=\"red\"><i className=\"fas fa-sort-up\"></i></font></span>);\n            return null;\n          }\n    }, {\n        dataField: 'Absolute Arbitrage',\n        text: 'Absolute Arbitrage',\n        sort: true,\n        filter: numberFilter({\n            comparatorStyle: {padding:'5px'},\n            numberStyle: { width: '100px', margin: '10px'},\n          }),\n        formatter: priceFormatter,\n        sortCaret: (order, column) => {\n            if (!order) return (<span>&nbsp;&nbsp;<i className=\"fas fa-sort\"></i></span>);\n            else if (order === 'asc') return (<span>&nbsp;&nbsp;<font color=\"red\"><i className=\"fas fa-sort-down\"></i></font></span>);\n            else if (order === 'desc') return (<span>&nbsp;&nbsp;<font color=\"red\"><i className=\"fas fa-sort-up\"></i></font></span>);\n            return null;\n          }  \n    }, {\n        dataField: 'ETF Price',\n        text: 'ETF Price',\n        sort: true,\n        formatter: priceFormatter,\n        sortCaret: (order, column) => {\n            if (!order) return (<span>&nbsp;&nbsp;<i className=\"fas fa-sort\"></i></span>);\n            else if (order === 'asc') return (<span>&nbsp;&nbsp;<font color=\"red\"><i className=\"fas fa-sort-down\"></i></font></span>);\n            else if (order === 'desc') return (<span>&nbsp;&nbsp;<font color=\"red\"><i className=\"fas fa-sort-up\"></i></font></span>);\n            return null;\n          }\n    }, {\n        dataField: 'ETF Change Price %',\n        text: 'ETF Change Price %',\n        sort: true,\n        formatter: priceFormatter,\n        sortCaret: (order, column) => {\n            if (!order) return (<span>&nbsp;&nbsp;<i className=\"fas fa-sort\"></i></span>);\n            else if (order === 'asc') return (<span>&nbsp;&nbsp;<font color=\"red\"><i className=\"fas fa-sort-down\"></i></font></span>);\n            else if (order === 'desc') return (<span>&nbsp;&nbsp;<font color=\"red\"><i className=\"fas fa-sort-up\"></i></font></span>);\n            return null;\n          }\n    }, {\n        dataField: 'Net Asset Value Change%',\n        text: 'Net Asset Value Change%',\n        sort: true,\n        formatter: priceFormatter,\n        sortCaret: (order, column) => {\n            if (!order) return (<span>&nbsp;&nbsp;<i className=\"fas fa-sort\"></i></span>);\n            else if (order === 'asc') return (<span>&nbsp;&nbsp;<font color=\"red\"><i className=\"fas fa-sort-down\"></i></font></span>);\n            else if (order === 'desc') return (<span>&nbsp;&nbsp;<font color=\"red\"><i className=\"fas fa-sort-up\"></i></font></span>);\n            return null;\n          }\n    }, {\n        dataField: 'Over Bought/Sold',\n        text: 'Over Bought/Sold',\n        sort: true,\n        formatter: (cell) => selectOptions[cell],\n        filter: selectFilter({\n            options: selectOptions,\n            style: { width: '100px', margin:'10px' }\n        }),\n        formatter: priceFormatter,\n        sortCaret: (order, column) => {\n            if (!order) return (<span>&nbsp;&nbsp;<i className=\"fas fa-sort\"></i></span>);\n            else if (order === 'asc') return (<span>&nbsp;&nbsp;<font color=\"red\"><i className=\"fas fa-sort-down\"></i></font></span>);\n            else if (order === 'desc') return (<span>&nbsp;&nbsp;<font color=\"red\"><i className=\"fas fa-sort-up\"></i></font></span>);\n            return null;\n          }\n    }];\n\n\n    const expandRow = {\n        parentClassName: 'table-primary',\n        renderer: data => (\n            <div>\n                <Table striped hover variant=\"dark\" bsPrefix=\"innerTable\">\n                    <thead>\n                        <tr>\n                            <th className=\"cursor-pointer\">Top</th>\n                            <th>ETF Mover</th>\n                            <th>Moved By</th>\n                            <th>Change in Holding</th>\n                            <th>Changed by</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr key={\"row-expanded-1-\" + data.symbol}>\n                            <td> #1 </td>\n                            <td>{data[\"ETFMover%1\"][0]}</td>\n                            <td className={data[\"ETFMover%1\"][1].toFixed(3) < 0 ? \"red\" : \"green\"}>{data[\"ETFMover%1\"][1].toFixed(3)}</td>\n                            <td>{data[\"Change%1\"][0]}</td>\n                            <td className={data[\"ETFMover%1\"][1].toFixed(3) < 0 ? \"red\" : \"green\"}>{data[\"Change%1\"][1].toFixed(3)}</td>\n                        </tr>\n                        <tr key={\"row-expanded-2-\" + data.symbol}>\n                            <td> #2 </td>\n                            <td>{data[\"ETFMover%2\"][0]}</td>\n                            <td className={data[\"ETFMover%2\"][1].toFixed(3) < 0 ? \"red\" : \"green\"}>{data[\"ETFMover%2\"][1].toFixed(3)}</td>\n                            <td>{data[\"Change%2\"][0]}</td>\n                            <td className={data[\"Change%2\"][1].toFixed(3) < 0 ? \"red\" : \"green\"}>{data[\"Change%2\"][1].toFixed(3)}</td>\n                        </tr>\n                        <tr key={\"row-expanded-3-\" + data.symbol}>\n                            <td> #3 </td>\n                            <td>{data[\"ETFMover%3\"][0]}</td>\n                            <td className={data[\"ETFMover%3\"][1].toFixed(3) < 0 ? \"red\" : \"green\"}>{data[\"ETFMover%3\"][1].toFixed(3)}</td>\n                            <td>{data[\"Change%3\"][0]}</td>\n                            <td className={data[\"Change%3\"][1].toFixed(3) < 0 ? \"red\" : \"green\"}>{data[\"Change%3\"][1].toFixed(3)}</td>\n                        </tr>\n                        <tr key={\"row-expanded-4-\" + data.symbol}>\n                            <td> #4 </td>\n                            <td>{data[\"ETFMover%4\"][0]}</td>\n                            <td className={data[\"ETFMover%4\"][1].toFixed(3) < 0 ? \"red\" : \"green\"}>{data[\"ETFMover%4\"][1].toFixed(3)}</td>\n                            <td>{data[\"Change%4\"][0]}</td>\n                            <td className={data[\"Change%4\"][1].toFixed(3) < 0 ? \"red\" : \"green\"}>{data[\"Change%4\"][1].toFixed(3)}</td>\n                        </tr>\n                        <tr key={\"row-expanded-5-\" + data.symbol}>\n                            <td> #5 </td>\n                            <td>{data[\"ETFMover%5\"][0]}</td>\n                            <td className={data[\"ETFMover%5\"][1].toFixed(3) < 0 ? \"red\" : \"green\"}>{data[\"ETFMover%5\"][1].toFixed(3)}</td>\n                            <td>{data[\"Change%5\"][0]}</td>\n                            <td className={data[\"Change%5\"][1].toFixed(3) < 0 ? \"red\" : \"green\"}>{data[\"Change%5\"][1].toFixed(3)}</td>\n                        </tr>\n                    </tbody>\n                </Table>\n            </div>\n        ),\n        showExpandColumn: true,\n        onExpand: (row, isExpand, rowIndex, e) => {\n            console.log(row.id);\n            console.log(isExpand);\n            console.log(rowIndex);\n            console.log(e);\n        },\n        onExpandAll: (isExpandAll, rows, e) => {\n            console.log(isExpandAll);\n            console.log(rows);\n            console.log(e);\n        },\n        expandHeaderColumnRenderer: ({ isAnyExpands }) => {\n            if (isAnyExpands) {\n              return <i className=\"fas fa-caret-down\" style={{width : '10px'}}></i>;\n            }\n            return <i className=\"fas fa-caret-right\" style={{width : '10px'}}></i>;\n          },\n        expandColumnRenderer: ({ expanded }) => {\n            if (expanded) {\n              return (\n                <i className=\"fas fa-caret-down\" style={{width : '10px'}}></i>\n              );\n            }\n            return (\n                <i className=\"fas fa-caret-right\" style={{width : '10px'}}></i>\n            );\n          }\n    };\n\n    if (errorCode >= 500){\n        // console.log(refreshElement);\n        return(\n            <h3 style={{color:'red', alignContent:'center'}}>DATA FOR THIS MINUTE WILL BE AVAILABLE AT 8TH SECOND OF THIS MINUTE</h3>\n        )\n    }\n\n    return (\n        <div style={{ padding: \"20px\" }}>\n        <form>\n            <div className=\"form-row\">\n                <div className=\"col-md-4 mb-3\">\n                    <strong className=\"App-clock text-white\">Showing Data for : </strong><strong style={ { color: 'red' }}>{new Date(dataForTime).toLocaleTimeString([], {year: 'numeric', month: 'numeric', day: 'numeric', hour: '2-digit', minute:'2-digit'})}</strong><strong className='text-white'> Local Time</strong>\n                </div>\n                <div className=\"col-md-4 mb-3\">\n                    <strong className=\"App-clock text-white\">Data Fetched at: </strong><strong style={ { color: 'red' }}>{fetchTime.toLocaleString()}</strong><strong className='text-white'> Local Time</strong>\n                </div>\n                <div className=\"col-md-4 mb-3\">\n                    <strong className=\"App-clock text-white\">Current Local time: </strong><strong style={ { color: 'red' }}>{currentTime.toLocaleString()}</strong><strong className='text-white'> Local Time</strong>\n                </div>\n            </div>\n        </form>\n        <BootstrapTable\n            keyField=\"symbol\"\n            data={tableData}\n            bootstrap4={true}\n            columns={columns}\n            striped\n            hover\n            size=\"lg\"\n            classes=\"table-dark font-size-sm\"\n            expandRow={expandRow}\n            filter={filterFactory()}\n        />\n        </div>\n    );\n\n};\n\n\nexport default LiveArbitrageAllTable;\n","import React from \"react\";\n// import Table from \"react-bootstrap/Table\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n// import axios from \"axios\";\n// import { tsvParse, csvParse } from \"d3-dsv\";\n// import { timeParse } from \"d3-time-format\";\n\nimport \"./Styles/Live_Arbitrage_All.css\";\n// import LiveArbitrageAllTable from './Live_Arbitrage_Table';\nimport LiveArbitrageAllTable from \"./Live_Arb_Table2\";\n\nimport { connect } from \"react-redux\";\nimport { CommonNavBar } from \"../../Common_Components/NavBar\";\n\nclass Live_Arbitrage_All extends React.Component {\n  state = {\n    LiveArbitrageAllEtf: \"\",\n  };\n\n  render() {\n    return (\n      <>\n        <CommonNavBar />\n        <Row>\n          <Col xs={12} md={12} lg={12}>\n            <LiveArbitrageAllTable\n              data={this.state.LiveArbitrageAllEtf || []}\n            />\n          </Col>\n        </Row>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ETF: state.navbar.ETF,\n  };\n};\n\nexport default connect(mapStateToProps, null)(Live_Arbitrage_All);\n","import React from \"react\";\nimport { Switch } from \"react-router-dom\";\nimport ProtectedRoute from \"./ProtectedRoute\";\nimport { Live_Arbitrage_All } from \"../Pages/Live_Arbitrage\";\n\nconst LiveArbitrageAllRoutes = () => {\n  return (\n    <Switch>\n      <ProtectedRoute\n        path=\"/Live-Arbitrage\"\n        component={Live_Arbitrage_All}\n      />\n    </Switch>\n  );\n};\n\nexport default LiveArbitrageAllRoutes;\n"],"sourceRoot":""}