{"version":3,"sources":["Pages/Live_Arbitrage_Single/Live_Arbitrage_Main.jsx","Routes/LiveArbitrageSingleRoutes.jsx"],"names":["Live_Arbitrage_Single","state","Full_Day_Arbitrage_Data","Full_Day_Prices","scatterPlotData","LiveArbitrage","LiveSpread","Prices","LiveVWPrice","OpenPrice","ClosePrice","HighPrice","LowPrice","CurrentTime","ETFStatus","Signal","SignalStrength","pnlstatementforday","LiveColor","ArbitrageLineChart","etfmoversDictCount","highestChangeDictCount","CandlestickSignals","isLoading","parseDate","timeParse","dataFetchInterval","setInterval","Date","getSeconds","UpdateArbitragDataTables","updateAnotherData","this","fetchETFLiveData","prevProps","match","params","ETF","props","clearInterval","intervalId","axios","get","then","res","lastArbitrage","data","Arbitrage","slice","pop","tsvParse","parseData","lastPrice","length","setState","reverse","open","close","high","low","SignalCategorization","last_minute_signal","SignalInfo","Strength","moment","date","format","catch","err","console","log","lastLineChart","Time","VWPrice","className","style","height","Card","bg","text","Header","CombinedPieCharts","Body","Loader","LiveArbitrageTable","LiveStatusWindow","Table","size","striped","bordered","hover","variant","map","index","key","Array","isArray","Magnitude","LineChartForHistArb","parse","d","parseFloat","volume","parseInt","TickVolume","React","Component","LiveArbitrageSingleRoutes","useSelector","navbar","ProtectedRoute","path","component","from","to"],"mappings":"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","file":"static/js/8.799a6fd3.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport { tsvParse } from \"d3-dsv\";\nimport { timeParse } from \"d3-time-format\";\nimport Card from \"react-bootstrap/Card\";\nimport Table from \"react-bootstrap/Table\";\nimport ChartComponent from \"../../Component/StockPriceChart\";\nimport LiveStatusWindow from \"./LiveStatusWindow\";\nimport \"../../static/css/Live_Arbitrage.css\";\nimport CombinedPieCharts from \"../../Component/CombinedPieCharts\";\nimport LiveArbitrageTable from \"./LiveArbitrageTable\";\nimport LineChartForHistArb from \"../../Component/LineChartForHistArb\";\nimport { Loader } from \"../../Common_Components/Loader\";\nimport ScatterPlot from \"../../Component/ScatterPlott\";\nimport { CommonNavBar } from \"../../Common_Components/NavBar\";\nimport \"./Styles/style.css\";\nimport { last } from \"lodash\";\nimport moment from \"moment\";\n\nclass Live_Arbitrage_Single extends React.Component {\n  state = {\n    Full_Day_Arbitrage_Data: [],\n    Full_Day_Prices: null,\n    scatterPlotData: \"\",\n    LiveArbitrage: \"\",\n    LiveSpread: \"\",\n    Prices: {},\n    LiveVWPrice: \"\",\n    OpenPrice: \"\",\n    ClosePrice: \"\",\n    HighPrice: \"\",\n    LowPrice: \"\",\n    CurrentTime: \"\",\n    ETFStatus: \"\",\n    Signal: \"\",\n    SignalStrength: \"\",\n    pnlstatementforday: \"\",\n    LiveColor: \"\",\n    ArbitrageLineChart: [],\n    etfmoversDictCount: \"\",\n    highestChangeDictCount: \"\",\n    CandlestickSignals: [],\n    isLoading: true,\n  };\n  parseDate = timeParse(\"%Y-%m-%d %H:%M:%S\");\n\n  componentDidMount() {\n    this.fetchETFLiveData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.match.params.ETF !== this.props.match.params.ETF) {\n      this.state.isLoading = true;\n      clearInterval(this.intervalId);\n      this.fetchETFLiveData();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  dataFetchInterval = () =>\n    setInterval(() => {\n      if (new Date().getSeconds() == 8) {\n        this.UpdateArbitragDataTables();\n        this.updateAnotherData();\n      }\n    }, 1000);\n\n  fetchETFLiveData() {\n    const { ETF } = this.props.match.params;\n\n    if (ETF) {\n      axios\n        .get(`/api/ETfLiveArbitrage/Single/${ETF}`)\n        .then((res) => {\n          const lastArbitrage = res.data.Arbitrage.slice(-1).pop();\n          const Full_Day_Prices = tsvParse(\n            res.data.Prices,\n            this.parseData(this.parseDate)\n          );\n          \n         const lastPrice = Full_Day_Prices[Full_Day_Prices.length - 1];\n        \n          this.intervalId = this.dataFetchInterval();\n          this.setState({\n            ...this.state,\n            Full_Day_Arbitrage_Data: [...res.data.Arbitrage].reverse(),\n            Full_Day_Prices: Full_Day_Prices,\n            OpenPrice: lastPrice.open,\n            ClosePrice: lastPrice.close,\n            HighPrice: lastPrice.high,\n            LowPrice: lastPrice.low,\n            pnlstatementforday: res.data.pnlstatementforday,\n            SignalCategorization: res.data.SignalCategorization,\n            scatterPlotData: res.data.scatterPlotData,\n            ArbitrageLineChart: res.data.ArbitrageLineChart,\n            etfmoversDictCount: res.data.etfmoversDictCount,\n            highestChangeDictCount: res.data.highestChangeDictCount,\n            CandlestickSignals: res.data.CandlestickSignals,\n            last_minute_signal: res.data.last_minute_signal,\n            ETFStatus: res.data.SignalInfo.ETFStatus,\n            Signal: res.data.SignalInfo.Signal,\n            SignalStrength: res.data.SignalInfo.Strength,\n            LiveArbitrage: lastArbitrage[\"Arbitrage_in_$\"],\n            LiveSpread: lastArbitrage[\"ETF_Trading_Spread_in_$\"],\n            CurrentTime: moment(lastPrice.date).format(\"HH:mm:ss\"),\n            isLoading: false,\n            LiveColor:\n              lastArbitrage[\"Arbitrage_in_$\"] > 0\n                ? \"text-danger\"\n                : lastArbitrage[\"Arbitrage_in_$\"] == 0\n                ? \"text-muted\"\n                : \"text-success\",\n          });\n        })\n        .catch((err) => console.log(err));\n    }\n  }\n\n  UpdateArbitragDataTables() {\n    const { ETF } = this.props.match.params;\n    if (ETF) {\n      axios\n        .get(`/api/ETfLiveArbitrage/Single/UpdateTable/${ETF}`)\n        .then((res) => {\n          const lastLineChart = this.state.ArbitrageLineChart.slice(-1).pop();\n          this.setState({\n            ...this.state,\n            Full_Day_Arbitrage_Data:\n              this.state.Full_Day_Arbitrage_Data[0].Time !==\n              res.data.Arbitrage.Time\n                ? [res.data.Arbitrage, ...this.state.Full_Day_Arbitrage_Data]\n                : [...this.state.Full_Day_Arbitrage_Data],\n\n            ArbitrageLineChart:\n              lastLineChart.Time !== res.data.Arbitrage.Time\n                ? [\n                    ...this.state.ArbitrageLineChart,\n                    {\n                      \"Arbitrage in $\": res.data.Arbitrage[\"Arbitrage_in_$\"],\n                      Time: res.data.Arbitrage.Time,\n                    },\n                  ]\n                : [...this.state.ArbitrageLineChart],\n            scatterPlotData: [\n              ...this.state.scatterPlotData,\n              {\n                \"ETF Change Price %\": res.data.Arbitrage[\"ETF_Change_Price_%\"],\n                \"Net Asset Value Change%\":\n                  res.data.Arbitrage[\"Net_Asset_Value_Change%\"],\n              },\n            ],\n            LiveArbitrage: res.data.Arbitrage[\"Arbitrage_in_$\"],\n            LiveSpread: res.data.Arbitrage[\"ETF_Trading_Spread_in_$\"],\n            CurrentTime: res.data.Arbitrage.Time,\n            LiveVWPrice: res.data.Prices.VWPrice,\n            OpenPrice: res.data.Prices.open,\n            ClosePrice: res.data.Prices.close,\n            HighPrice: res.data.Prices.high,\n            LowPrice: res.data.Prices.low,\n            ETFStatus: res.data.SignalInfo.ETFStatus,\n            Signal: res.data.SignalInfo.Signal,\n            SignalStrength: res.data.SignalInfo.Strength,\n            LiveColor:\n              res.data.Arbitrage[\"Arbitrage_in_$\"] > 0\n                ? \"text-danger\"\n                : res.data.Arbitrage[\"Arbitrage_in_$\"] == 0\n                ? \"text-muted\"\n                : \"text-success\",\n          });\n        })\n        .catch((err) => console.log(err));\n    }\n  }\n\n  updateAnotherData() {\n    const { ETF } = this.props.match.params;\n\n    if (ETF) {\n      axios\n        .get(`/api/ETfLiveArbitrage/Single/SignalAndCandle/${ETF}`)\n        .then((res) => {\n          this.setState({\n            ...this.state,\n            CandlestickSignals: [...res.data.CandlestickSignals],\n            SignalCategorization: [...res.data.SignalCategorization],\n            pnlstatementforday: { ...res.data.pnlstatementforday },\n            last_minute_signal: res.data.last_minute_signal,\n            Full_Day_Prices: tsvParse(\n              res.data.Prices,\n              this.parseData(this.parseDate)\n            ),\n          });\n        })\n        .catch((err) => console.log(err));\n    }\n  }\n\n  render() {\n    const { ETF } = this.props.match.params;\n    const {\n      HighPrice,\n      OpenPrice,\n      ClosePrice,\n      LowPrice,\n      SignalStrength,\n      CurrentTime,\n      ETFStatus,\n      Signal,\n      LiveArbitrage,\n      LiveSpread,\n      LiveColor,\n      scatterPlotData,\n      SignalCategorization,\n      pnlstatementforday,\n      last_minute_signal,\n      etfmoversDictCount,\n      Full_Day_Arbitrage_Data,\n      highestChangeDictCount,\n      isLoading,\n      CandlestickSignals,\n      Full_Day_Prices,\n      ArbitrageLineChart,\n    } = this.state;\n\n    return (\n      <>\n        <CommonNavBar />\n        <div className=\"container-fluid font-size-sm\">\n          <div className=\"row\">\n            <div className=\"col-lg-6 col-md-6 col-sm-12\">\n              <div className=\"row\">\n                <div className=\"col-lg-8 col-md-8 col-sm-12 padding-0\">\n                  <div className=\"FullPageDiv\" style={{ height: \"92vh\" }}>\n                    <Card bg=\"dark\" text=\"white\">\n                      <Card.Header className=\"flex-row\">\n                        <span>Live Arbitrage {ETF}</span>\n                        <div className=\"margin-left-auto\">\n                          <CombinedPieCharts\n                            etfmoversDictCount={etfmoversDictCount}\n                            highestChangeDictCount={highestChangeDictCount}\n                          />\n                        </div>\n                      </Card.Header>\n                      <Card.Body className=\"padding-1px overflow-auto\">\n                        {isLoading ? (\n                          <Loader />\n                        ) : (\n                          <LiveArbitrageTable data={Full_Day_Arbitrage_Data} />\n                        )}\n                      </Card.Body>\n                    </Card>\n                  </div>\n                </div>\n\n                <div className=\"col-lg-4 col-md-4 col-sm-12\">\n                  <div className=\"row\">\n                    <div className=\"col-lg-12 col-md-12 col-sm-12\">\n                      <LiveStatusWindow\n                        HighPrice={HighPrice}\n                        OpenPrice={OpenPrice}\n                        ClosePrice={ClosePrice}\n                        LowPrice={LowPrice}\n                        SignalStrength={SignalStrength}\n                        CurrentTime={CurrentTime}\n                        ETFStatus={ETFStatus}\n                        Signal={Signal}\n                        LiveArbitrage={LiveArbitrage}\n                        LiveSpread={LiveSpread}\n                        LiveColor={LiveColor}\n                        last_minute_signal={last_minute_signal}\n                      />\n                    </div>\n\n                    <div className=\"col-lg-12 col-md-12 col-sm-12\">\n                      <Card className=\"height-100\" bg=\"dark\" text=\"white\">\n                        <Card.Header>\n                          Alpha Candle Stick Pattern Signals\n                        </Card.Header>\n\n                        <Card.Body className=\"padding-1px overflow-auto\">\n                          <Table\n                            size=\"sm\"\n                            striped\n                            bordered\n                            hover\n                            variant=\"dark\"\n                          >\n                            <thead>\n                              <tr>\n                                <th>Candle Type</th>\n                                <th>Last Occurrence</th>\n                                <th>Trade Signal</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {CandlestickSignals.map((data, index) => (\n                                <tr key={index}>\n                                  <td>{data[0]}</td>\n                                  <td>{data[1]}</td>\n                                  <td>{data[2]}</td>\n                                </tr>\n                              ))}\n                            </tbody>\n                          </Table>\n                        </Card.Body>\n                      </Card>\n                    </div>\n\n                    <div className=\"col-lg-12 col-md-12 col-sm-12\">\n                      <Card bg=\"dark\" text=\"white\" className=\"height-100\">\n                        <Card.Header>Arbitrage Spread</Card.Header>\n                        <Card.Body className=\"padding-1px\">\n                          {this.state.isLoading ? (\n                            <Loader />\n                          ) : (\n                            <Table\n                              size=\"sm\"\n                              striped\n                              bordered\n                              hover\n                              variant=\"dark\"\n                            >\n                              <thead>\n                                <tr>\n                                  <th>Magnitude</th>\n                                  <th># Buy Sign</th>\n                                  <th>Buy Ret</th>\n                                  <th># Sell Sign</th>\n                                  <th>Sell Ret</th>\n                                </tr>\n                              </thead>\n                              <tbody>\n                                {Array.isArray(SignalCategorization) &&\n                                  SignalCategorization.map((data, index) => (\n                                    <tr key={index}>\n                                      <td>{data.Magnitude}</td>\n                                      <td>{data[\"# Buy Sign\"]}</td>\n                                      <td>{data[\"Buy Ret\"]}</td>\n                                      <td>{data[\"# Sell Sign\"]}</td>\n                                      <td>{data[\"Sell Ret\"]}</td>\n                                    </tr>\n                                  ))}\n                              </tbody>\n                            </Table>\n                          )}\n                        </Card.Body>\n                      </Card>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"col-lg-6 col-md-6 col-sm-12 padding-0\">\n              <div className=\"row\">\n                <div className=\"col-lg-12 col-md-12 col-sm-12\">\n                  <Card bg=\"dark\" text=\"white\" className=\"height-100\">\n                    <Card.Header>Price Chart</Card.Header>\n                    <Card.Body className=\"padding-1px\">\n                      <ChartComponent data={Full_Day_Prices} />\n                    </Card.Body>\n                  </Card>\n                </div>\n\n                <div className=\"col-lg-6 col-md-6 col-sm-12\">\n                  <Card bg=\"dark\" text=\"white\" className=\"height-100\">\n                    <Card.Header>Arb Time Series</Card.Header>\n\n                    <Card.Body className=\"padding-1px\">\n                      {this.state.isLoading ? (\n                        <Loader />\n                      ) : (\n                        <LineChartForHistArb data={ArbitrageLineChart} />\n                      )}\n                    </Card.Body>\n                  </Card>\n                </div>\n\n                <div className=\"col-lg-6 col-md-6 col-sm-12 padding-0\">\n                  <Card bg=\"dark\" text=\"white\" className=\"height-100\">\n                    <Card.Header>ETF Change % Vs NAV change %</Card.Header>\n\n                    <Card.Body className=\"padding-1px\">\n                      {this.state.isLoading ? (\n                        <Loader />\n                      ) : (\n                        <ScatterPlot data={scatterPlotData} />\n                      )}\n                    </Card.Body>\n                  </Card>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  // Parse Data For Stock Price Chart\n  parseData(parse) {\n    return function (d) {\n      d.date = parse(d.date);\n      d.open = +parseFloat(d.open);\n      d.high = +parseFloat(d.high);\n      d.low = +parseFloat(d.low);\n      d.close = +parseFloat(d.close);\n      d.volume = +parseInt(d.TickVolume);\n\n      return d;\n    };\n  }\n}\n\nexport default Live_Arbitrage_Single;\n","import React from \"react\";\nimport { Switch, Redirect } from \"react-router-dom\";\nimport ProtectedRoute from \"./ProtectedRoute\";\nimport { Live_Arbitrage_Single } from \"../Pages/Live_Arbitrage_Single\";\nimport { useSelector } from \"react-redux\";\n\nconst LiveArbitrageSingleRoutes = () => {\n  const { ETF } = useSelector((state) => state.navbar);\n  return (\n    <Switch>\n      <ProtectedRoute\n        path=\"/live-arbitrage-single/:ETF\"\n        component={Live_Arbitrage_Single}\n      />\n      <Redirect\n        from=\"/live-arbitrage-single\"\n        to={`/live-arbitrage-single/${ETF}`}\n      />\n    </Switch>\n  );\n};\n\nexport default LiveArbitrageSingleRoutes;\n"],"sourceRoot":""}